@model Powerlevel.Models.ViewModels.WorkoutVM

@{
    ViewBag.Title = "Progress";
}

<!--Makes the buttons look cool-->
<style>
    .StageButton {
        border: solid;
        color: black;
        padding: 12px 32px;
        text-align: center;
        text-decoration: none;
        font-size: 16px;
        font-family: 'Comic Sans MS';
    }

    #PrevWorkoutDis {
        background-color: #E7E7E7;
        color: #B5B5B5;
        border-color: black;
    }

    #PrevWorkout {
        background-color: #FF7869;
    }

    #NextWorkout {
        background-color: #FAFF6B;
    }

    #CompletedWorkout {
        background-color: #6EFF69;
    }
</style>

<br />
<h1>Current Workout: <b>@Html.ActionLink(Model.WorkoutName, "WorkoutList", "Exercise", new { id = Model.UserActiveWorkout }, new { @class = "LinkColor" })</b></h1>
<br />
<!-- Get the Active stage and Max stage in order to determine which buttons may be pressed below -->
@{ double PrevNextCheck = Model.ActiveWorkoutStage;}
@{ double LastStage = Model.MaxWorkoutStage;}

<!-- Math and display for the progress bar showing how far along in a workout you're in -->
@{ double percentStage = PrevNextCheck / LastStage; }
@{ string percentString = percentStage.ToString("#0.##%"); }
<h3 style="text-align:center">Workout Progress</h3>
<div id="wholeBar" style="width:100%; background-color:#E7E7E7; border-style:solid">
    <div id="percentBar" style="width:@percentString;height:30px; background-color:#38FF37;"><p style="text-align:center; font-size:20px; font-family:'Comic Sans MS'; color:black"><b>@percentString</b></p></div>
</div>

<table>
    <tr>
        <td>
            <div style="margin:20px 0px 50px 0px;">
                <!-- Goes to the "ProgressBack" controller function and decrements ActiveWorkoutStage by 1, then refreshes this page -->
                @using (Html.BeginForm("ProgressBack", "UserWorkouts", new { id = Model.UWId }))
                {
                    @Html.AntiForgeryToken()
                    <!-- Prevents user from going back a workout if they are on the first stage -->
                    if (PrevNextCheck == 0)
                    {
                        <input type="submit" disabled="disabled" id="PrevWorkoutDis" class="StageButton" title="PrevWorkoutDis" value="Previous Stage" />
                    }
                    else
                    {
                        <input type="submit" title="PrevWorkout" id="PrevWorkout" class="StageButton" value="Previous Stage" />
                    }
                }
            </div>
        </td>
        <td>
            <div style="margin:20px 0px 50px 700px;">
                <!-- Goes to the "ProgressForward" controller function and increments ActiveWorkoutStage by 1, then refreshes this page -->
                @using (Html.BeginForm("ProgressForward", "UserWorkouts", new { id = Model.UWId }))
                {
                    @Html.AntiForgeryToken()
                    <!-- Both inputs have same functionality as logic is handled in controller, this simply changes
                    what is displayed for the name of the textbox -->
                    if (PrevNextCheck + 1 == LastStage)
                    {
                        <input type="submit" title="CompleteWorkout" id="CompletedWorkout" class="StageButton" value="Complete Workout" />
                    }
                    else
                    {
                        <input type="submit" title="NextWorkout" id="NextWorkout" class="StageButton" value="Next Stage" />
                    }
                }
            </div>
        </td>
    </tr>
</table>

<!-- Exercise information pulled from VM -->
<h2>Current Exercise: <b>@Html.ActionLink(Model.CurrentExercise.Name, "Details", "Exercise", new { id = Model.CurrentExercise.ExerciseId }, new { @class = "LinkColor" })</b></h2>
<br />
<h2>Exercise Type: <b>@Model.CurrentExercise.Type</b></h2>
<br />
<h2>Exercise Instructions: @Model.CurrentExercise.Instructions</h2>