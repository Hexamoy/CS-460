@model Powerlevel.Models.UserWorkout

@{
    ViewBag.Title = "Create";
}
<h1>@ViewBag.WorkoutId</h1>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <br />
    <h2>Welcome to the Gym!</h2>
    <br />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @* Controller logic sets the User connected to Workout to Currently logged in user so no need to give them option to set this  *@
    <input type="hidden" name="UserId" value="@ViewBag.UserId" />

    @*get the workout name, using a dropdownlist*@
    @if (ViewBag.FromPlan == true)
    {
        <h2>Your planned workout is: <span style="color:#FDFFAF">@ViewBag.PlannedWorkoutName</span></h2>
        <div class="form-group">
            @Html.LabelFor(model => model.UserActiveWorkout, "", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("UserActiveWorkout", null, htmlAttributes: new { @class = "form-control", @hidden = "hidden" })
                @Html.ValidationMessageFor(model => model.UserActiveWorkout, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    @if (ViewBag.FromPlan == false)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.UserActiveWorkout, "", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("UserActiveWorkout", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UserActiveWorkout, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    <div class="form-group">
        <div class="col-md-10">
            @*This is used to determine if the workout was started from a workout plan or as an individual workout*@
            @Html.CheckBox("FromPlan", (ViewBag.FromPlan == true) ? true : false, new { @class = "form-control", @hidden = "hidden", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.UserActiveWorkout, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <input type="submit" value="Start Workout!" class="btn btn-primary" id="IndexButton" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Go Back", "Index", null, new { @class = "LinkColor" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
